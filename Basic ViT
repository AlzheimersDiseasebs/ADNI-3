import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Dense, Flatten, Input, LayerNormalization, MultiHeadAttention
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.preprocessing import StandardScaler

# Veri setini yükleyin
images = np.load("resized_images_elle.npy")
labels = np.load("data_label_elle.npy")

# Etiketleri kategorik formata dönüştürün
labels = to_categorical(labels - 1, 5)

# Veriyi standartlaştırın (normalize edin)
scaler = StandardScaler()
images = scaler.fit_transform(images.reshape(-1, images.shape[-1])).reshape(images.shape)

# Giriş verisini şekillendirin
images = np.expand_dims(images, axis=-1)  # Tek kanallı görüntüleri RGB formatına genişletme
images = np.repeat(images, 3, axis=-1)    # Tek kanallı verileri üç kanala kopyalama

# 10 katlı çapraz doğrulama için bölmek
kfold = StratifiedShuffleSplit(n_splits=10, random_state=42)
fold_accuracies = []

# Accuracy değerlerini kaydetmek için bir callback fonksiyonu oluşturun
class AccuracyCallback(tf.keras.callbacks.Callback):
    def __init__(self):
        super(AccuracyCallback, self).__init__()
        self.train_accuracies = []

    def on_epoch_end(self, epoch, logs=None):
        train_acc = logs.get('binary_accuracy')
        print(f'Training Accuracy for Epoch {epoch + 1}: {train_acc}')
        self.train_accuracies.append(train_acc)

# 10 katlı çapraz doğrulama döngüsü
for train_index, test_index in kfold.split(images, labels):
    X_train, X_test = images[train_index], images[test_index]
    y_train, y_test = labels[train_index], labels[test_index]

    # Define Vision Transformer (ViT) model
    class VisionTransformer(tf.keras.Model):
        def __init__(self, num_layers, num_heads, dff, input_shape=(224, 224, 3), num_classes=5):
            super(VisionTransformer, self).__init__()
            self.embedding = tf.keras.Sequential([
                Input(shape=input_shape),
                Flatten(),
                Dense(512, activation='relu')
            ])
            self.positional_encoding = self.positional_encoding(input_shape[0] * input_shape[1], 512)  # Boyutları düzeltiliyor
            self.enc_layers = [self.EncoderLayer(512, num_heads, dff) for _ in range(num_layers)]
            self.flatten = Flatten()
            self.fc = Dense(num_classes, activation='softmax')

        def call(self, x, training):
            x = self.embedding(x)
            x += self.positional_encoding  # Konumsal kodlama ekleniyor
            for enc_layer in self.enc_layers:
                x = enc_layer(x, training)
            x = self.flatten(x)
            x = self.fc(x)
            return x

        def positional_encoding(self, position, d_model):
            angle_rads = 1 / tf.pow(10000.0, (2 * (tf.range(position, dtype=tf.float32) // 2)) / tf.cast(d_model, tf.float32))
            return tf.expand_dims(angle_rads, 0)

        def EncoderLayer(self, d_model, num_heads, dff, rate=0.1):
            return tf.keras.Sequential([
                MultiHeadAttention(num_heads=num_heads, key_dim=d_model // num_heads),
                Dense(dff, activation='relu'),
                Dense(d_model),
                LayerNormalization(epsilon=1e-6)
            ])

    # Modeli oluşturun
    model = VisionTransformer(num_layers=6, num_heads=8, dff=2048, input_shape=(224, 224, 3))

    # Modeli derleyin
    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=[AUC(), BinaryAccuracy(), Precision(), Recall()])

    accuracy_callback = AccuracyCallback()  # AccuracyCallback sınıfından bir nesne oluşturun

    # Modeli eğitin
    model.fit(X_train, y_train, epochs=10, batch_size=32, callbacks=[accuracy_callback])

    fold_accuracies.append(accuracy_callback.train_accuracies)  # Her bir kategori için accuracy değerlerini ayrı ayrı kaydedin

# Tüm katmanların accuracy değerlerini birleştirin
all_accuracies = np.mean(np.array(fold_accuracies), axis=0)

# Eğitim sırasında accuracy değerlerini gösteren bir grafik oluşturun
plt.plot(range(1, len(all_accuracies) + 1), all_accuracies, label='Average Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy Over Epochs for All Folds')
plt.legend()
plt.show()

# Her bir fold için accuracy değerlerini gösteren bir grafik oluşturun
for i, fold_accuracy in zip(range(1, 11), fold_accuracies):
    plt.plot(range(1, len(fold_accuracy) + 1), fold_accuracy, label=f'Fold {i}')

plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy Over Epochs for All Folds')
plt.legend()
plt.show()



